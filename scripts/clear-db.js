require('dotenv').config();
const mongoose = require('mongoose');

const clearDatabase = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    const mongoURI = process.env.MONGODB_URI;
    
    if (!mongoURI) {
      console.error('‚ùå MONGODB_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
      process.exit(1);
    }

    await mongoose.connect(mongoURI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collections = await mongoose.connection.db.collections();
    
    console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${collections.length}`);
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    for (let collection of collections) {
      const collectionName = collection.collectionName;
      const count = await collection.countDocuments();
      
      if (count > 0) {
        await collection.deleteMany({});
        console.log(`  ‚úÖ –û—á–∏—â–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" (${count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`);
      } else {
        console.log(`  ‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è "${collectionName}" —É–∂–µ –ø—É—Å—Ç–∞`);
      }
    }

    console.log('\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!');
    
    await mongoose.connection.close();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    await mongoose.connection.close();
    process.exit(1);
  }
};

clearDatabase();


